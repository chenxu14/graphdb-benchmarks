# Choose which data sets you want to include in the benchmark by removing the contents.
#Enron
eu.socialsensor.dataset=data/Email-Enron.txt
#Amazon
#eu.socialsensor.dataset=data/Amazon0601.txt
#YouTube
#eu.socialsensor.dataset=data/com-youtube.ungraph.txt
#eu.socialsensor.actual-communities=data/com-youtube.all.cmty.txt
#LiveJournal
#eu.socialsensor.dataset=data/com-lj.ungraph.txt
#eu.socialsensor.actual-communities=com-lj.all.cmty.txt
#Synthetic
#can change the number in the filename of the synthetic datasets to 1000, 5000, 10000, 20000, 30000, 40000, 50000
#eu.socialsensor.dataset=data/network1000.dat
#eu.socialsensor.actual-communities=data/community1000.dat

eu.socialsensor.database-storage-directory=storage
# Sample meters this frequently (milliseconds)
eu.socialsensor.metrics.csv.interval=1000
# for the csv reporter
eu.socialsensor.metrics.csv.directory=metrics
# for the graphite reporter
#eu.socialsensor.metrics.graphite.hostname=192.168.59.103

# Choose which databases you want to in the benchmark by removing the comments.
# Available dbs are:
#eu.socialsensor.databases=thb
eu.socialsensor.databases=jhb
#eu.socialsensor.databases=neo4j

# Database specific options
# Janus options
eu.socialsensor.janus.custom-ids=true
# page-size - Number of results to pull when iterating over a storage backend (default 100)
eu.socialsensor.janus.page-size=100
# to disable buffering on mutations, set to zero. Default 1024. This will set the queue size as well
# use max int as buffer size
eu.socialsensor.janus.buffer-size=2147483647
# id block size default 10000
eu.socialsensor.janus.ids.block-size=10000

# The following five benchmarks are permutable (that is, the suite can run them
# many times in different database order). To turn on permutations, set
# eu.socialsensor.permute-benchmarks=true
eu.socialsensor.permute-benchmarks=false

# Choose which benchmark you want to run by removing the comments. Choose one Insertion
# workload and then query/clustering workloads afterward.
eu.socialsensor.benchmarks=MASSIVE_INSERTION
#eu.socialsensor.benchmarks=SINGLE_INSERTION
eu.socialsensor.benchmarks=FIND_NEIGHBOURS
eu.socialsensor.benchmarks=FIND_ADJACENT_NODES
eu.socialsensor.benchmarks=FIND_SHORTEST_PATH
eu.socialsensor.shortest-path-random-nodes=101
eu.socialsensor.shortest-path-max-hops=5

# The clustering benchmark is not permutable even if eu.socialsensor.permute-benchmarks=true
#eu.socialsensor.benchmarks=CLUSTERING
eu.socialsensor.randomize-clustering=false
eu.socialsensor.nodes-count=1000

# Choose the cache values you want run the CW benchmark, or have them generated. To choose:
eu.socialsensor.cache-percentages=5
eu.socialsensor.cache-percentages=10
eu.socialsensor.cache-percentages=15
eu.socialsensor.cache-percentages=20
eu.socialsensor.cache-percentages=25
eu.socialsensor.cache-percentages=30

# To have the cache values generated for the CW benchmark.
#eu.socialsensor.cache-increment-factor=1
#eu.socialsensor.cache-values-count=6

# This benchmark measures the time it takes to delete the database
#eu.socialsensor.benchmarks=DELETION

# Results folder path
eu.socialsensor.results-path=results
